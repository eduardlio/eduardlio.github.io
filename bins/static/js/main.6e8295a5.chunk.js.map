{"version":3,"sources":["App.js","utils.js","serviceWorker.js","index.js"],"names":["DEFAULT_CONFIG","recycleDate","Date","binDay","App","useState","config","until","date","Math","abs","getDay","getDaysUntilNextBinDay","nextBinDay","dayOfWeek","setDate","getDate","getNextBinDay","nextBinDayIsRecycle","days","floor","isRecycleDay","className","toLocaleDateString","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uOAKMA,G,MAAiB,CACnBC,YAAa,IAAIC,KAAK,KAAM,EAAG,IAC/BC,OAAQ,IAwEGC,MApEf,WAAgB,IAAD,EACoBC,mBAASL,GAD7B,mBACJM,EADI,KAELC,GAFK,KCSuB,SAACJ,GAA+B,IAAvBK,EAAsB,uDAAf,IAAIN,KACtD,OAAOO,KAAKC,KAAKF,EAAKG,UAAY,EAAIR,IAAW,GDRnCS,CAAuBN,EAAOH,SACtCU,ECRmB,SAACV,GAA+B,IAAvBK,EAAsB,uDAAf,IAAIN,KAC1CY,EAAYN,EAAKG,SACdJ,EAAQE,KAAKC,KAAKI,GAAa,EAAIX,IAAW,GAChDU,EAAa,IAAIX,KAErB,OADAW,EAAWE,QAAQF,EAAWG,UAAYT,GACnCM,EDGYI,CAAcX,EAAOH,QAClCe,ECakB,SAACjB,GAAmC,IAAtBO,EAAqB,uDAAd,IAAIN,KAC9CiB,EAAOV,KAAKW,OAAQZ,EAAOP,GAAR,MAAyC,IAClE,OAAgB,IAATkB,EDfwBE,CAAaf,EAAOL,YAAaY,GAM7D,OACI,yBAAKS,UAAU,OACX,yBAAKA,UAAU,aACX,kDACwB,IACnBf,EAAQ,EAAR,aACWA,EADX,SAEe,IAAVA,EACA,WACA,QAAS,IANnB,MAOQM,EAAWU,mBAAmB,UAEtC,iCACQL,EAAiC,MAAX,SAD9B,2BAxBU,IEGpBM,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOzB,GAC9B0B,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEtC,GAAUA,EAAOuC,UACnBvC,EAAOuC,SAAST,KAMlBO,QAAQC,IAAI,sCAGRtC,GAAUA,EAAOwC,WACnBxC,EAAOwC,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkB/C,GACvB,GAA6C,kBAAmB0B,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,GAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,GAAN,sBAEP/B,IAgEV,SAAiCO,EAAOzB,GAEtCqD,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAAAC,GACjCA,EAAa+B,aAAahC,MAAK,WAC7BT,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOzB,MAG1ByC,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBtC,EAAOzB,GAI/B0B,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,iHAMJd,EAAgBC,EAAOzB,OClC/B2B,K","file":"static/js/main.6e8295a5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { getDaysUntilNextBinDay, getNextBinDay, isRecycleDay } from \"./utils\";\n\n// Sunday is 0\nconst DEFAULT_CONFIG = {\n    recycleDate: new Date(2020, 2, 31),\n    binDay: 2\n};\nconst DAY_SELECT_ACTIVE = false;\n\nfunction App() {\n    const [config, updateConfig] = useState(DEFAULT_CONFIG);\n    const until = getDaysUntilNextBinDay(config.binDay);\n    const nextBinDay = getNextBinDay(config.binDay);\n    const nextBinDayIsRecycle = isRecycleDay(config.recycleDate, nextBinDay);\n    const updateBinDay = day => {\n        if (day < 7 && day >= 0) {\n            updateConfig({ ...config, binDay: day });\n        }\n    };\n    return (\n        <div className=\"App\">\n            <div className=\"headerApp\">\n                <h1>\n                    The next bin day is{\" \"}\n                    {until > 1\n                        ? `in ${until} days`\n                        : until === 1\n                        ? \"tomorrow\"\n                        : \"today\"}{\" \"}\n                    on {nextBinDay.toLocaleDateString(\"en-GB\")}\n                </h1>\n                <h2>\n                    It{!nextBinDayIsRecycle ? \" won't\" : \"'ll\"} be a recycle bin\n                    day\n                </h2>\n            </div>\n            {DAY_SELECT_ACTIVE && (\n                <DaySelect\n                    activeDay={config.binDay}\n                    onDayChange={day => updateBinDay(day)}\n                />\n            )}\n        </div>\n    );\n}\nfunction DaySelect(props) {\n    const days = [\n        \"Sunday\",\n        \"Monday\",\n        \"Tuesday\",\n        \"Wednesday\",\n        \"Thursday\",\n        \"Friday\",\n        \"Saturday\"\n    ];\n    return (\n        <div className=\"daySelectWrap\">\n            <h3>Bin day is on :</h3>\n            <div className=\"daySelect\">\n                {days.map((day, index) => {\n                    return (\n                        <p\n                            className={\n                                index === props.activeDay ? \"activeDay\" : null\n                            }\n                            key={index}\n                            onClick={() => props.onDayChange(index)}\n                        >\n                            {day}\n                        </p>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","/**\r\n * Returns the next bin day given the bin day of the week\r\n * @param {int} binDay day of the week (0 is sunday)\r\n * @param {Date} date (default is `new Date()`) date from which to find the next bin day\r\n * @returns {Date}\r\n */\r\nexport const getNextBinDay = (binDay, date = new Date()) => {\r\n\tconst dayOfWeek = date.getDay();\r\n    const until = Math.abs((dayOfWeek - (7 + binDay)) % 7);\r\n    let nextBinDay = new Date();\r\n    nextBinDay.setDate(nextBinDay.getDate() + until);\r\n    return nextBinDay;\r\n};\r\n/**\r\n * Returns the number of days until the next bin day given\r\n * the bin day. Will always be less than 7.\r\n * @param {int} binDay day of the week (0 is sunday)\r\n * @param {Date} date (default is `new Date()`) date from which to find days until next bin day\r\n * @returns {int} \r\n */\r\nexport const getDaysUntilNextBinDay = (binDay, date = new Date()) => {\r\n    return Math.abs((date.getDay() - (7 + binDay)) % 7);\r\n};\r\n/**\r\n * Returns whether or not the given date is a recycle date\r\n * @param {Date} recycleDate a known date that is a recycle day in the bin cycle\r\n * @param {Date} date (default is `new Date()`) date to determine recycle date status\r\n */\r\nexport const isRecycleDay = (recycleDate, date = new Date()) =>{\r\n\tconst days = Math.floor(((date - recycleDate) / (86400 * 1000)) % 14);\r\n\treturn days === 0\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}